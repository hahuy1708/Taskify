"""
Django settings for taskify_backend project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import environ  # type: ignore
import os
from datetime import timedelta
from pathlib import Path
from rest_framework.permissions import AllowAny, IsAuthenticated

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(
    DEBUG=(bool, False)
)

environ.Env.read_env(os.path.join(BASE_DIR.parent, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',  # Thêm để hỗ trợ JWT
    'rest_framework_simplejwt.token_blacklist',  # Để hỗ trợ blacklist refresh tokens nếu cần
    'djoser',
    'drf_spectacular',
    'taskify_auth',
    'taskify_core',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'taskify_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTH_USER_MODEL = 'taskify_auth.CustomUser'  # Custom user model

WSGI_APPLICATION = 'taskify_backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': env('DB_NAME'),
        'USER': env('DB_USER'),
        'PASSWORD': env('DB_PASSWORD'),
        'HOST': env('DB_HOST'),
        'PORT': env('DB_PORT'),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}
print("DB_NAME:", env("DB_NAME", default="NOT FOUND"))

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Cấu hình Django Rest Framework (DRF) với JWT
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # Mặc định yêu cầu auth cho các API
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Sử dụng JWT làm authentication chính
        'rest_framework.authentication.SessionAuthentication',  # Để hỗ trợ admin panel nếu cần
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',  # Sử dụng drf-spectacular cho schema
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Hệ thống quản lý task nhóm',
    'DESCRIPTION': 'API cho hệ thống quản lý task nhóm, hỗ trợ doanh nghiệp và người dùng tự do.',
    'VERSION': '1.0.0', # Phiên bản API
    'SERVE_INCLUDE_SCHEMA': False, # Không bao gồm schema trong server
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),  # Thời hạn access token (ngắn để bảo mật)
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # Thời hạn refresh token
    'ROTATE_REFRESH_TOKENS': True,  # Tạo mới refresh token khi refresh
    'BLACKLIST_AFTER_ROTATION': True,  # Blacklist refresh token cũ sau khi rotate
    'AUTH_HEADER_TYPES': ('Bearer',),  # Header: Authorization: Bearer <token>
    'SIGNING_KEY': SECRET_KEY,  # Sử dụng SECRET_KEY để ký token
    'USER_ID_FIELD': 'id',  # Field ID của user
    'USER_ID_CLAIM': 'user_id',  # Claim trong token
}

DJOSER = {
    'LOGIN_FIELD': 'username',  # Login by username
    'USER_CREATE_PASSWORD_RETYPE': True,  # Yêu cầu nhập lại password khi tạo user
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION': False,  # Gửi email xác nhận khi đổi password
    'SEND_CONFIRMATION_EMAIL': False,  # Gửi email xác nhận
    'SET_PASSWORD_RETYPE': True,  # Yêu cầu nhập lại password khi set
    'PASSWORD_RESET_CONFIRM_RETYPE': True,  # Yêu cầu nhập lại khi reset password
    'USERNAME_RESET_CONFIRM_RETYPE': True,  # Tương tự cho username
    'ACTIVATION_URL': 'activate/{uid}/{token}',  # URL kích hoạt account
    'PASSWORD_RESET_CONFIRM_URL': 'password-reset-confirm/{uid}/{token}',  # URL reset password
    'USERNAME_RESET_CONFIRM_URL': 'email-reset-confirm/{uid}/{token}',  # URL reset email/username
    'SEND_ACTIVATION_EMAIL': False,  # Gửi email kích hoạt khi tạo user
    'SERIALIZERS': {
        'user_create': 'taskify_auth.serializers.CustomUserCreateSerializer',
        'user': 'taskify_auth.serializers.UserSerializer',
        'user_delete': 'djoser.serializers.UserDeleteSerializer',
        'current_user': 'taskify_auth.serializers.UserSerializer',
    },
    'PERMISSIONS': {
        'user_create': [AllowAny],   
    },
}

# CORS settings
# CORS_ALLOW_ALL_ORIGINS = True  

CORS_ALLOWED_ORIGINS = [
    'http://localhost:8080',  # Frontend Vue.js
    'http://127.0.0.1:8080',
    "http://localhost:5173",  # Nếu dùng Vite
    "http://127.0.0.1:5173",
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',  
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_ALLOW_CREDENTIALS = True


# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env("EMAIL_HOST", default="smtp.gmail.com")
EMAIL_PORT = env("EMAIL_PORT", default=587)
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=True)
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
